@article{Huang:2022,
author = {Huang, Yu-Peng and Xia, Yijie and Yang, Lijiang and Wei, Jiachen and Yang, Yi Isaac and Gao, Yi Qin},
title = {SPONGE: A GPU-Accelerated Molecular Dynamics Package with Enhanced Sampling and AI-Driven Algorithms},
journal = {Chinese Journal of Chemistry},
volume = {40},
number = {1},
pages = {160-168},
keywords = {Molecular dynamics, Molecular modeling, Enhanced sampling, Machine learning, Computational chemistry},
doi = {https://doi.org/10.1002/cjoc.202100456},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cjoc.202100456},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cjoc.202100456},
abstract = {Comprehensive Summary SPONGE (Simulation Package tOward Next GEneration molecular modeling) is a software package for molecular dynamics (MD) simulation of solution and surface molecular systems. In this version of SPONGE, the all- atom potential energy functions used in AMBER MD packages are used by default and other all-atom/coarse- grained potential energy functions are also supported. SPONGE is designed to extend the timescale being approached in MD simulations by utilizing the latest CUDA- enabled graphical processing units (GPU) and adopting highly efficient enhanced sampling algorithms, such as integrated tempering, selective integrated tempering and enhanced sampling of reactive trajectories. It is highly modular and new algorithms and functions can be incorporated con veniently. Particularly, a specialized Python plugin can be easily used to perform the machine learning MD simulation with MindSpore, TensorFlow, PyTorch or other popular machine learning frameworks. Furthermore, a plugin of Finite-Element Method (FEM) is also available to handle metallic surface systems. All these advanced features increase the power of SPONGE for modeling and simulation of complex chemical and biological systems. What is the most favorite and original chemistry developed in your research group? Our research centers at developing methods and theories to unravel molecular mechanisms of chemical and biological systems. By establishing theoretical models, developing enhanced sampling methods combined with machine learning techniques, we are able to conduct comprehensive thermodynamic and dynamic analyses for these complex systems. How do you get into this specific field? Could you please share some experiences with our readers? I got into theoretical chemistry as a PhD student. My PhD adviser Prof. Rudolph A. Marcus led me into this field and inspired me by his love of science. Enjoy life, always learn new things and be independent in thinking are something I learnt from my advisers (Professors Dalin Yang, Qihe Zhu, Rudy Marcus, and Martin Karplus) and would love to pass to my students. How do you supervise your students? We learn from each other. What is the most important personality for scientific research? Curiosity, passion, and persistence have been of great value to my career. What are your hobbies? What's your favorite book(s)? Reading, Ping-Pong, and jogging. I always enjoy reading history. Who influences you mostly in your life? Too many, family, academic advisors, friends, students, and colleagues.},
year = {2022}
}

@article{Abraham:2015,
title = {GROMACS: High performance molecular simulations through multi-level parallelism from laptops to supercomputers},
journal = {SoftwareX},
volume = {1-2},
pages = {19-25},
year = {2015},
issn = {2352-7110},
doi = {https://doi.org/10.1016/j.softx.2015.06.001},
url = {https://www.sciencedirect.com/science/article/pii/S2352711015000059},
author = {Mark James Abraham and Teemu Murtola and Roland Schulz and SzilÃ¡rd PÃ¡ll and Jeremy C. Smith and Berk Hess and Erik Lindahl},
keywords = {Molecular dynamics, GPU, SIMD, Free energy},
abstract = {GROMACS is one of the most widely used open-source and free software codes in chemistry, used primarily for dynamical simulations of biomolecules. It provides a rich set of calculation types, preparation and analysis tools. Several advanced techniques for free-energy calculations are supported. In version 5, it reaches new performance heights, through several new and enhanced parallelization algorithms. These work on every level; SIMD registers inside cores, multithreading, heterogeneous CPUâ€“GPU acceleration, state-of-the-art 3D domain decomposition, and ensemble-level parallelization through built-in replica exchange and the separate Copernicus framework. The latest best-in-class compressed trajectory storage format is supported.}
}

@article{Thompson:2022,
title = {LAMMPS - a flexible simulation tool for particle-based materials modeling at the atomic, meso, and continuum scales},
journal = {Computer Physics Communications},
volume = {271},
pages = {108171},
year = {2022},
issn = {0010-4655},
doi = {https://doi.org/10.1016/j.cpc.2021.108171},
url = {https://www.sciencedirect.com/science/article/pii/S0010465521002836},
author = {Aidan P. Thompson and H. Metin Aktulga and Richard Berger and Dan S. Bolintineanu and W. Michael Brown and Paul S. Crozier and Pieter J. {in 't Veld} and Axel Kohlmeyer and Stan G. Moore and Trung Dac Nguyen and Ray Shan and Mark J. Stevens and Julien Tranchida and Christian Trott and Steven J. Plimpton},
keywords = {Molecular dynamics, Materials modeling, Parallel algorithms, LAMMPS},
abstract = {Since the classical molecular dynamics simulator LAMMPS was released as an open source code in 2004, it has become a widely-used tool for particle-based modeling of materials at length scales ranging from atomic to mesoscale to continuum. Reasons for its popularity are that it provides a wide variety of particle interaction models for different materials, that it runs on any platform from a single CPU core to the largest supercomputers with accelerators, and that it gives users control over simulation details, either via the input script or by adding code for new interatomic potentials, constraints, diagnostics, or other features needed for their models. As a result, hundreds of people have contributed new capabilities to LAMMPS and it has grown from fifty thousand lines of code in 2004 to a million lines today. In this paper several of the fundamental algorithms used in LAMMPS are described along with the design strategies which have made it flexible for both users and developers. We also highlight some capabilities recently added to the code which were enabled by this flexibility, including dynamic load balancing, on-the-fly visualization, magnetic spin dynamics models, and quantum-accuracy machine learning interatomic potentials.
Program Summary
Program Title: Large-scale Atomic/Molecular Massively Parallel Simulator (LAMMPS) CPC Library link to program files: https://doi.org/10.17632/cxbxs9btsv.1 Developer's repository link: https://github.com/lammps/lammps Licensing provisions: GPLv2 Programming language: C++, Python, C, Fortran Supplementary material: https://www.lammps.org Nature of problem: Many science applications in physics, chemistry, materials science, and related fields require parallel, scalable, and efficient generation of long, stable classical particle dynamics trajectories. Within this common problem definition, there lies a great diversity of use cases, distinguished by different particle interaction models, external constraints, as well as timescales and lengthscales ranging from atomic to mesoscale to macroscopic. Solution method: The LAMMPS code uses parallel spatial decomposition, distributed neighbor lists, and parallel FFTs for long-range Coulombic interactions [1]. The time integration algorithm is based on the StÃ¸rmer-Verlet symplectic integrator [2], which provides better stability than higher-order non-symplectic methods. In addition, LAMMPS supports a wide range of interatomic potentials, constraints, diagnostics, software interfaces, and pre- and post-processing features. Additional comments including restrictions and unusual features: This paper serves as the definitive reference for the LAMMPS code.
References
[1]S. Plimpton, Fast parallel algorithms for short-range molecular dynamics. J. Comp. Phys. 117 (1995) 1â€?9.[2]L. Verlet, Computer experiments on classical fluids: I. Thermodynamical properties of Lennardâ€“Jones molecules, Phys. Rev. 159 (1967) 98â€?03.}
}

@article{Maier:2015,
author = {Maier, James A. and Martinez, Carmenza and Kasavajhala, Koushik and Wickstrom, Lauren and Hauser, Kevin E. and Simmerling, Carlos},
title = {ff14SB: Improving the Accuracy of Protein Side Chain and Backbone Parameters from ff99SB},
journal = {Journal of Chemical Theory and Computation},
volume = {11},
number = {8},
pages = {3696-3713},
year = {2015},
doi = {10.1021/acs.jctc.5b00255},
    note ={PMID: 26574453},
URL = { 
        https://doi.org/10.1021/acs.jctc.5b00255
},
eprint = { 
        https://doi.org/10.1021/acs.jctc.5b00255 
}
}

@article{Tian:2020,
author = {Tian, Chuan and Kasavajhala, Koushik and Belfon, Kellon A. A. and Raguette, Lauren and Huang, He and Migues, Angela N. and Bickel, John and Wang, Yuzhang and Pincay, Jorge and Wu, Qin and Simmerling, Carlos},
title = {ff19SB: Amino-Acid-Specific Protein Backbone Parameters Trained against Quantum Mechanics Energy Surfaces in Solution},
journal = {Journal of Chemical Theory and Computation},
volume = {16},
number = {1},
pages = {528-552},
year = {2020},
doi = {10.1021/acs.jctc.9b00591},
    note ={PMID: 31714766},
URL = { 
        https://doi.org/10.1021/acs.jctc.9b00591
},
eprint = { 
        https://doi.org/10.1021/acs.jctc.9b00591
}
}
